{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed423f92-7947-4d41-b8f7-5c0a9b51430e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd\n",
    "df=pd.read_csv(r'C:\\Users\\AYISHA RANA K\\Desktop\\python data analyst duo\\Premier_League_Final_Data.csv')\n",
    "df.head()\n",
    "df.tail()\n",
    "df.shape\n",
    "df.info()\n",
    "df['Club']=df['Club'].str.replace(r'\\d+','',regex=True)\n",
    "df.head()\n",
    "df[\"Winners\"].isnull()\n",
    "df[\"Winners\"].isnull().any()\n",
    "df['Winners'].value_counts() \n",
    "df[\"Winners\"].fillna(0, inplace=True)\n",
    "df[\"Winners\"].isnull().any()\n",
    "df['Runners-up'].value_counts()\n",
    "df['Runners-up'].fillna(0, inplace=True)\n",
    "df['Runners-up'].replace('-', 0, inplace=True)\n",
    "df['Runners-up'] = pd.to_numeric(df['Runners-up'], errors='coerce')\n",
    "df['Runners-up'] = df['Runners-up'].astype('Int64')\n",
    "df.info()\n",
    "df['TeamLaunch'].value_counts()\n",
    "df['TeamLaunch'] = pd.to_datetime(df['TeamLaunch'], errors='coerce')\n",
    "df['TeamLaunch'] = df['TeamLaunch'].dt.strftime('%Y')\n",
    "df['TeamLaunch'].value_counts()\n",
    "df['lastplayed_pl'].value_counts()\n",
    "df['lastplayed_pl'] = (pd.to_datetime(df['lastplayed_pl'], format='%b-%y', errors='coerce')).dt.year\n",
    "df['lastplayed_pl']\n",
    "df.describe()\n",
    "df[df['Winners']==13]['Club']\n",
    "df[df['Runners-up']==7]['Club']\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline\n",
    "plt.hist(df['Matches Played'])\n",
    "plt.xlabel('No. of Matches Played')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Histogram of Matches Played')\n",
    "df[df['Matches Played']>=900]['Club']\n",
    "df[df['Matches Played'] < 900]\n",
    "df = df[df['Matches Played'] < 900].reset_index(drop=True)\n",
    "df.head()\n",
    "df.shape\n",
    "df['Winning Rate'] = (df['Win'] / df['Matches Played'])*100\n",
    "df['Loss Rate'] = (df['Loss'] / df['Matches Played'])*100\n",
    "df['Drawn Rate'] = (df['Drawn'] / df['Matches Played'])*100\n",
    "df['Clean Sheet Rate'] = (df['Clean Sheets'] / df['Matches Played'])*100\n",
    "df['Avg Goals Per Match']=df['Goals']/df['Matches Played']\n",
    "\n",
    "df['Avg Goals Per Match']=df['Avg Goals Per Match'].round()\n",
    "df.head()\n",
    "plt.figure(figsize=(8, 6))\n",
    "boxplot = plt.boxplot([df['Winning Rate'], df['Drawn Rate'], df['Loss Rate'], df['Clean Sheet Rate']], \n",
    "                      patch_artist=True,\n",
    "                      labels=['Winning Rate', 'Drawn Rate', 'Loss Rate', 'Clean Sheet Rate'])\n",
    "plt.title('Distribution of Winning Rate, Drawn Rate, Loss Rate and Clean Sheet Rate')\n",
    "plt.xlabel('Winning, Drawn ,Lost Game & Clean Sheet')\n",
    "plt.ylabel('Rate')\n",
    "plt.show()\n",
    "Q1 = df['Winning Rate'].quantile(0.25)\n",
    "Q3 = df['Winning Rate'].quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "upper_bound = Q3 + 1.5 * IQR\n",
    "highwinningrate = df[(df['Winning Rate'] > upper_bound)]\n",
    "highwinningrate\n",
    "lower_bound = Q1 - 1.5 * IQR\n",
    "lowwinningrate = df[(df['Winning Rate'] < lower_bound)]\n",
    "lowwinningrate\n",
    "Q1 = df['Drawn Rate'].quantile(0.25)\n",
    "Q3 = df['Drawn Rate'].quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "upper_bound = Q3 + 1.5 * IQR\n",
    "highwinningrate = df[(df['Drawn Rate'] > upper_bound)]\n",
    "highwinningrate\n",
    "df['Avg Goals Per Match'].describe()\n",
    "df['Winners'].value_counts()\n",
    "df['Runners-up'].value_counts()\n",
    "df[(df['Winners']==1) | (df['Runners-up']==1)] \n",
    "df['Matches Played'].describe()\n",
    "df['lastplayed_pl'].value_counts()\n",
    "df[df['lastplayed_pl']==2023]['Club']\n",
    "upper_bound_WinningRate = df['Winning Rate'].quantile(0.75)\n",
    "lower_bound_LosingRate = df['Loss Rate'].quantile(0.25)\n",
    "lower_bound_DrawnRate = df['Drawn Rate'].quantile(0.25)\n",
    "upper_bound_CleanSheetRate = df['Clean Sheet Rate'].quantile(0.75)\n",
    "len(df)\n",
    "df['scores']=np.zeros(len(df))\n",
    "df.head()\n",
    "df.loc[df['Matches Played'] >= 372, 'scores'] += 10\n",
    "df.loc[df['Winning Rate'] >= upper_bound_WinningRate, 'scores'] += 15\n",
    "df.loc[df['Loss Rate'] <= lower_bound_LosingRate, 'scores'] += 15\n",
    "df.loc[(df['Drawn Rate'] <= lower_bound_DrawnRate) & (df['Loss Rate'] <= lower_bound_LosingRate), 'scores'] += 10\n",
    "df.loc[(df['Clean Sheet Rate'] >= upper_bound_CleanSheetRate) & (df['Winning Rate'] >= upper_bound_WinningRate), 'scores'] += 10\n",
    "df.loc[df['Winners'] == 1, 'scores'] += 15\n",
    "df.loc[df['Runners-up'] == 1, 'scores'] += 10\n",
    "df.loc[df['lastplayed_pl'] == 2023, 'scores'] += 15\n",
    "df_sort = df.sort_values(by='scores', ascending=False)\n",
    "plt.figure(figsize=(25,10))\n",
    "plt.bar(df_sort['Club'], df_sort['scores'], color='blue')\n",
    "plt.ylabel('Scores', fontsize=16)\n",
    "plt.title('Football Club v/s performance score', fontsize=18)\n",
    "plt.legend(['Scores'], fontsize=14)\n",
    "plt.xticks(rotation=90, fontsize=14)\n",
    "plt.yticks(fontsize=14)\n",
    "plt.ylim(0, 100)\n",
    "plt.show()\n",
    "df_sort = df[(df['lastplayed_pl']==2023) | (df['lastplayed_pl']==2022) | (df['lastplayed_pl']==2021)].sort_values(by='scores', ascending=False)\n",
    "plt.figure(figsize=(25,10))\n",
    "plt.bar(df_sort['Club'], df_sort['scores'], color='blue')\n",
    "plt.ylabel('Scores', fontsize=16)\n",
    "plt.title('Football Club v/s performance score', fontsize=18)\n",
    "plt.legend(['Scores'], fontsize=14)\n",
    "plt.xticks(rotation=90, fontsize=14)\n",
    "plt.yticks(fontsize=14)\n",
    "plt.ylim(0, 100)\n",
    "plt.show()\n",
    "df[df['Club']=='Blackburn Rovers']['lastplayed_pl']"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
